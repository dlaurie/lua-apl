Lua⋆APL User's Manual
=====================

© Dirk Laurie 2013  Lua-style MIT licence

What it says in the README about installation and UTF-8 is not repeated
here.

APL is a functional language with extensive array processing abilities,
originally designed by Ken Iverson in the 1960's. Lua⋆APL is an extension
of Lua that gives access to the power of APL (the APL asterisk `⋆` means
`Power`) without leaving the comfort and security of Lua.

There are three modes of usage, which can be thought of as analogous to
the C API, scripting language, and standalone executable of Lua.

-   Library mode: APL functionality is offered as a Lua library, which
    makes no use of the APL character set except in its help
    information.

-   Lua mode: Functions callable from Lua can be written in APL. This is
    achieved via a function rather like Lua's `load`, which generates
    intermediate Lua code consisting of chained calls to the APL 
    library.

-   APL mode: Bare APL code can be entered direcctly at the terminal.
    Code deemed to be APL is translated to load and execute as
    in Lua mode. The result has an APL-like look-and-feel. If you
    already know APL, jump straight to that section and try it out.

The code examples shown here, even the ones in the section on Lua mode,
use the three-space prompt of the Lua⋆APL standalone rather than the
conventional Lua prompt, but all code except that shown in the section
on [APL mode] works on a vanilla Lua interpreter too.

In this document, we do not consistently use "APL" and "Lua⋆APL" as
denoting different things. "APL" is a fairly vague term, meaning more or
less "a typical APL implementation" or even "the APL way of thinking",
whereas "Lua⋆APL" is a specific term for this implementation, which of
course also falls under the shadowy APL umbrella.

Words like "standard" refer to features that are typically found in
almost every APL dialect since about 1980. "Non-standard" in the case of
Lua⋆APL means that I am using an unusual APL symbol without making any
attempt even to find out how other APL implementations use it. Please
contact me if you feel that some other symbol for the same concept is
actually semi-standard by now.

When I wrote this, the version number displayed by the start-up message
was `0.2.0`. As long as the first number is `0`, anything might still
change.

Library mode
============

This mode requires the module `apl-compiler`, which loads a C module
`apl_core` that is documented in the Programmer's Guide. Even though I
do not expect anybody to stop at library mode, it is the easiest place
to start for Lua programmers that do not know any APL. It is best learnt
in an interactive session because an extensive amount of interactive
help is available.

I'm assuming you loaded the module by 

       apl=require'apl-lib'
       apl:import'*'

That call to `apl:import` adds the 70-plus items of the module to the
global environment. Almost all of them are quite distinctively named,
but if you instinctively recoil in horror, muttering "pollution" under
your breath, by all means omit that line and prepare to type numerous
instances of `apl.`, or (in a script) replace it by assigning the ones
you actually use to local variables. Better, actually: just hold your
horses till you get to Lua mode; no large-scale imports necessary there.
 
A thorough knowledge of what the library offers is not needed if you
already know APL and plan to use mostly APL mode. If you already know
APL, by all means skip straight to [Interactive APL mode] and only read
this part later.

The module returns a table with keys named by the following convention:

-  `CamelCase`: APL functions
-  `lowercase`: Lua utilities
-  `_CAPS`:     needed by the system or providing information

"APL functions" of course does not imply that they are anything else
than just Lua functions. It merely means that these are the functions
that lie at the heart of APL, closely following the original design of
Iverson. There is a simple mapping between Lua postfix notation and APL
infix notation, for example:

   Lua                   APL
 ------------------- -- -----------------
      `_w`                 `⍵`
      `_a`                 `⍺`
   `func(_w,_a)`        `⍺ func ⍵`
   `Range(_w)`            `⍳⍵`
   `Find(_w,_⍺)`          `⍺⍳⍵`
   `Shape(_w)`            `⍴⍵`
   `Reshape(_w,_a)`       `⍺⍴⍵`
   `Decode(_w,_a)`        `⍺⊤⍵`
   `Add(_w,_a)`           `⍺+⍵`
   `Sub(_w,_a)`           `⍺-⍵`
   `Mul(_w,_a)`           `⍺×⍵`
   `Div(_w,_a)`           `⍺÷⍵`
 ------------------- -- -----------------

In total, over 70 of these functions are provided in Lua mode. The APL
symbols used for them, even those which in Lua denote arithmetic 
operators, must be thought of as names, not as as special characters. 

One and the same APL name often does duty for two Lua names. This is
possible because APL infix syntax allows the compiler to distinguish
between monadic and dyadic functions (see [Adity]) and select the
appropriate function. That distinction is possible in Lua too, but only
at run time, when one can test whether the second argument of a function
is present and not nil.

Since APL syntax makes the distinction at compile time, overloading of
the Lua names of the functions is not necessary. Instead, the names 
have been chosen to be descriptive of what the functions do.

Some semi-standard descriptive names are often used in APL documentation, 
such as <http://en.wikipedia.org/wiki/APL_syntax_and_symbols>. These have 
been retained in some cases (`Ravel`, `Reshape` etc), abbreviated in 
others (`Exp` rather than `Exponential` etc), and occasionally replaced 
by totally different names (`Power` rather than `Exponentiation`). 
There's no rule except what feels programmer-friendly to me.
  
The documentation, in particular the interactive help, freely uses both 
the Lua names and APL symbols simultaneously, so you will acquire 
a smattering of APL more or less painlessly even while using library mode 
only.

APL types and Lua types
-----------------------
 
An APL-like type structure consisting of functions, operators, scalars,
vectors and matrices is implemented via Lua values. 

The APL terms "function" and "operator" are used in a different sense 
than in Lua. The symbols for arithmetic, comparison etc are called 
"operators" in Lua and the parser treats them by strict precedence rules. 
In APL, those symbols are names of functions (many of them are actually
three-byte names that only look like a single character thanks to UTF-8), 
there is no notion of precedence, and "operator" means a function that 
acts on functions.

-   APL functions are Lua functions of two variables, returning one
    return value. In the documentation, the names `⍺,⍵` and `_a,_w` 
    are used respectively when the function is called from APL or from
    Lua.  The _left_ argument `⍺` in APL infix notation becomes the 
    _second_ argument `_a` in Lua postfix notation. In APL, the parser
    knows whether `⍺` is omitted; in Lua, providing `_a` as nil is 
    equivalent to omitting it.

-   APL operators are also Lua functions of two variables, but:

    1.  Their arguments and return value are functions.
    
    2.  In the documentation, the first argument is called `f` and 
        the second `g` in the documentation of both APL and Lua.

    3.  The _left_ argument `f` in APL infix notation becomes the 
        _first_ argument `f` in Lua postfix notation and must always
        be present; the (right) second argument `g` is usually absent, 
        `Inner` being the only function in `apl-lib` that uses it.
     
    4. Operators have a higher priority than functions.

-   APL arrays (vectors and matrices both) are Lua index-1 tables. The 
    ordering of matrix elements is row-wise. More on this in a while.

-   APL scalars are Lua numbers and strings. Other Lua types are 
    treated as scalar. In particular, a Lua function is an APL scalar. 
    This point, too, will be elaborated on.

APL arrays share a common metatable. Numeric keys in the simplest case
obey the same conventions as the Lua table library: the positive integer 
keys of `A` are expected to form a solid block from 1 to `#A`. The full
truth is more complicated; see [Array operations] and [Indexing].

String keys are used to achieve the extra functionality of APL arrays:

    `A.apl_len`: Optional field. If present, this is the value returned 
       by the Lua `#` operator.
    `A.rows`: Number of rows (matrix only).
    `A.cols`: Number of columns (matrix only).

It is possible to synthesize an APL array in vanilla Lua. However, it is
not recommended, and never necessary, for two reasons:

-   In almost all cases, the APL library will accept a Lua table as 
    a substitute for an APL vector.
-   All tables returned by the library are APL arrays. In particular,
    the function `Clone` will convert a Lua  to an APL array.

For example, to define a matrix (see [Formatting] for `_format`):

       apl._format = 'raw'          
       A = Reshape({11,12,13,21,22,23},{2,3})   
       print(A)
    [11,12,13;21,22,23]
       print(Ravel(A))
    (11,12,13,21,22,23) 

The _rank_ of an array is the number of indices it takes to reference
an element from it. APL allows rank 0 (scalar), rank 1 (vector) and 
rank (matrix). APL does not distinguish between row vectors and column
vectors; if you need to do that, use a one-row or one-column matrix.

`Shape` is the APL analogue of Lua's `type`, defined as follows:

-   number: `Shape(a) = {}`
-   vector: `Shape(x) = {#x}`
-   matrix: `Shape(A) = {A.rows,A.cols}`
-   string: `Shape(s) = #s`
-   other scalar: `Shape(other) = nil` 

It should be stressed that APL matrices are not tables of tables, 
they are simple tables that carry shape information.

Formatting
----------

APL normally uses a pretty-printing output format.

       print(Reshape({11,12,13,21,22,23},{2,3}))
    11 12 13
    21 22 23
       
While nice-looking, this format makes it hard to notice the subtle
distinctions that we will need to make in this manual, and therefore
we have in many of the examples used raw format. The Lua⋆APL `Format`
function in general takes two arguments. If the second argument is
absent, the `_format` field in the module table is interrogated. 
Since the module table is not read-only, the user can assign something
to `apl._format`. The value `"raw"` selects one-line output with the 
following conventions:

- undelimited: scalars
- delimited by braces: {Lua,table}
- delimited by parentheses: (APL,vector)
- delimited by brackets: [APL,matrix;semicolons,separate,rows]

Not-a-number is printed as `NaN` and nil as an underscore.

       print(Format{1,nil,0/0,"abc"})
    {1,_,NaN,'abc'}

The `Format` function works recursively until the result is a string.

Array operations
----------------

The whole point of using APL is so that one never (well, hardly ever)
needs to use an explicit table index. The vast majority of its functions
accept array arguments and return array values, and in cases where one
argument is a singleton (i.e. a scalar or one-element array) it will
usually be treated as applying term-by-term to the other argument.

Extra control is available by the `Each` and `Both` operators, see
[Nested arrays].

The APL library handles nil arguments gracefully in the case of all
scalar functions (i.e. functions that apply term-by-term to array
arguments).

       x=Clone{1,2,nil,4}; y=Rev(x)
       print(Add(x,y))
    {5,_,_,5}

Although the actual storage of a very sparse vector will be compact,
using mostly the hash part of a Lua table, there is no true optimized
support for sparse vectors. The functions simply iterate over the known
length of the array and skip nils.

###Indexing

APL arrays have a fixed size, which is frozen when the APL metatable
is set. The `__index` and `__newindex` metamethods come into play 
whenever an attempt is made to access any index except those which 
were in use at that moment. Note that those metamethods are _not_
invoked in the case of a valid numeric index; in particular, a matrix
can be accessed via a single valid numeric index.

- A string index works as usual.
- An nonexistent numeric index is illegal.
- If you assign nil to an existing numeric index, that index thenceforth
  becomes unavailable permanently.
- A table-valued index to a vector should either be an APL vector (Lua
  list accaptable) or an APL matrix. The result will have the same shape
  as the index.
- A table-valued index to a matrix should be a pair of items, each of
  which may be a number or a Lua list (APL vectors and matrices are 
  acceptable, but lose their magic powers) which select the rows and 
  columns. The result will have rank determined by the index types and
  shape determined by the lengths of the lists.
- A function-valued index to an array should be an iterator that
  returns a valid numeric index until it returns nil. The result is
  always a vector.

The two metamethods are available in the library as `Get` and `Set`,
and can be invoked explicitly, even with ordinary non-APL tables.
You should only do that with a function-valued or table-valued
index. Other valid indices are intercepted by Lua's usual indexing
process; the routines know that a scalar index that gets this far
must be invalid, and throw an error.

       x={1,2,3,"A","B","C"}
       y={10,20,30,A='a',B='b',C='c'}
       print(Get(x,{5,2,4}))
    'B' 2 'A'
       Set(y,Get(x,{5,2,4}),{100,200,300})
       print(y)
    table: 0x93e4e90
       print(Clone(y),y.A,y.B)
    10 200 30   300     100
       z=Clone(y)
       Get(z,1)
    ./apl-lib.lua:520: bad argument #2 to 'core_index' (index out of range)

### Nested arrays

The elements of an APL array may be themselves be arrays, since the 
inner structure of an element is opaque to APL, i.e. APL thinks of 
anything stored in an array as scalar. 

       A={{1,2},{3,4},{5,6}}; print(Format(A))
    {{1,2},{3,4},{5,6}}
       B=Clone(A); print(B)         
    ({1,2},{3,4},{5,6})            
       print(A[1]==B[1])
    true

That `true` says that `A[1]` and `B[1]` are actually one and the same 
element, and you can see it: the elements are still the original Lua
tables. This is not quite what is usually wanted from a routine called
`Clone`. The operator `Each` applies a function term-by-term to every
element of a table and returns a new array with the same shape as the
original.

       C=Each(Clone)(A); print(C)
    ((1,2),(3,4),(5,6))

The elements are now newly minted APL arrays, as is the containing
array.

There is also `Both`, which does the same for dyadic functions that
`Each` does for monadic.

       print(Both(Reshape)({{1,2,3,4},{5,6,7,8}},{{2,2}}))
    ([1,2;3,4],[5,6;7,8])

In this example, the two arguments are both nested arrays, so they
looks to APL like a two-element and a one-element array. A function
created by `Both` expects two arrays of compatible shape for 
term-by-term operations, but will accept a one-element second argument
to act as a constant value.  

A vector of vectors of the same length can be combined into a matrix,
and a matrix can be converted to a nested array. These operations are
so commonly needed that the non-standard APL function `Rerank` has 
have been invented for them.

Strings
-------

Lua⋆APL does not have character arrays, any more than Lua itself has
them. A string is a scalar. If you need to operate on individual bytes
of a string, the Lua function `string.byte` combines well with the 
library.

       tobytes = function(s) return {s:byte(1,-1)} end
       frombytes = function(s) return string.char(unpack(s)) end
       M=Each(tobytes){"The","quick","brown","fox"}; print(M)
    ({84,104,101},{113,117,105,99,107},{98,114,111,119,110},{102,111,120})
       print(Each(frombytes)(M))
    ('The','quick','brown','fox')

Library mode knows no UTF-8. If you need to operate on individual UTF-8 
codepoints, see [Lua mode]. 

Classification of functions
---------------------------

Part of the appeal of Iverson's design is the cogent uniformity of the
behaviour of APL functions. Most functions fall in one of a small number
of classes. 

### Primitive scalar functions

About one-half of all APL functions give scalar results when applied to
scalars, and are applied term-by-term to arrays, giving an array of the 
same shape. 

In the case of dyadic functions, it is a little more complicated, but 
the same for all of them.

-   The arguments must have compatible shapes, and the result has the 
    shape of the argument with higher rank.

"Compatible" means one of the following conditions hold:

-   The arguments have the same shape.
-   At least one argument is a singleton (i.e. has exactly one element).
-   One argument is a one-row or one-column matrix, and the other a 
    vector or a Lua table of the same length.

       x=Reshape(Range(10),{1,10}); print(x)
    [1,2,3,4,5,6,7,8,9,10]
       y=Reshape({1,-1},10); print(y)
    (1,-1,1,-1,1,-1,1,-1,1,-1)
       print(Mul(x,y))
    [1,-2,3,-4,5,-6,7,-8,9,-10]

A few functions give vector results when applied to scalars. In Lua⋆APL,
they can be applied to arrays, following the same rules as primitive
scalar functions, but yielding nested arrays. 

       print(Range{10,7})
    ((1,2,3,4,5,6,7,8,9,10),(1,2,3,4,5,6,7))
       print(Deal({10,100},{10,7}))
    ((1,3,6,9,8,4,7,5,10,2),(89,14,100,9,88,12,7))
    
### Primitive vector functions

A vector is treated as a whole, not term-by-term.

    Decode Down Encode Has Reverse Reverse1 Rotate Rotate1 Same Up  

### Rank-changing functions

Attach Attach1 Ravel Rerank Reshape 

### Selectors

    Compress Compress1 Drop Expand Expand1 Get Set Shape Take 

### Permuters

    Transpose


Find Format Has Pass  
Both Each Inner Outer Reduce Reduce1 Scan Scan1 

Global control variables
------------------------

APL traditionally makes use of some control variables that affect its
overall behaviour. Which these are, differs from one APL implementation
to the next, so they are sometimes called "system variables". In Lua⋆APL,
their names start with an underscore, and they are stored in the module
table.  

  --------------- -- -------------------------------------------------
  `_act`             Absolute comparison tolerance.
  `_rct`             Relative comparision tolerance.
  `_format`          Default format for monadic `Format`.
  `_strictness`      What to do in case of runtime errors.
  --------------- -- --------------------------------------------------

Comparison tolerance
~   Lua⋆APL does a straightforward comparison only in the case of 
    functions that test strict inequality (`TestNE`, `TestGT`, `TestLT`).
    Functions that claim to test for possible equality (`TestEq`, `TestGE`, 
    `TestLE`) actually test for approximate equality. If `apl._act` is 
    defined, `abs(_a-_w)<apl._act` also counts as equality. If `apl._rct` 
    is defined, `abs(_a-_w)<apl._rct*abs(_w)` also counts as equality. 

    The philosophical implications are mind-blowing (`TestEq(x,y)` may
    not give the same result as `TestEq(y,x)`, etc) but the practical 
    effect is that with the default settings, the equality tests do what 
    most sane people expect them to. If you are a numerical analyst 
    (i.e. the phrase "most sane people" does not include you), you can
    always set those tolerances to zero or nil.

       s=1/7; t=s+s+s+s+s+s+s; print(1==t)
    false
       print(TestGE(1,t))
    1
       apl._act=0; apl._rct=0
       print(TestGE(1,t))
    0

Strictness
~   Many functions expect an argument to have certain properties. For
    example, `Transpose` expects a matrix.

    If it does not, what must APL do? For some functions, this depends 
    on `apl._strictness`.

    0. Continue regardless and accept the consequences.
    1. Print a warning message, but continue regardless.
    2. Abort the function, returning the offending value unchanged.
    3. Throw an error.

    Some other functions always throw an error, e.g. `Range` must have
    a non-negative integer.
    
List of Lua⋆APL functions
-------------------------

The current version may give a slightly different result, so do the following
yourself. For most of these, you can get interactive help.

       help(apl)
    Contents: Abs Add And Attach Attach1 Binom Both Ceil Circ Clone Compress
        Compress1 Deal Decode Div Down Drop Each Encode Exp Expand Expand1 Fact
        Find Floor Format Get Has Inner Ln Log Max Min Mod Mul NaN Nand Nor Not
        Or Outer Pass Pi Pow Range Ravel Recip Reduce Reduce1 Rerank Reshape
        Reverse Reverse1 Roll Rotate Rotate1 Same Scan Scan1 Set Shape Sign Sub
        Take TestEq TestGE TestGT TestLE TestLT TestNE Transpose Unm Up _F help
        import util    
       help(Transpose)
    Transpose: ⍉⍵ → matrix transpose of ⍵

`apl._F` contains sub-lists of functions for the use of the APL compiler.
You can safely ignore it. `util` contains functions that the compiler will
also need. Don't rely on any of those to be present in any future version.
If I like them enough to make them available publicly, they will be given
CamelCase names.

Lua mode
========

This mode requires the module `apl-compiler`, which loads `apl-lib`,
adds some additional items to the module table, and erases `_F` and
`util` from it. It is the mode in which to write programs, but makes
quite a convenient interactive session too. If you prefer the control
and safety of a family car to the breathless excitement of an open-top
sports model, you will be happier with Lua mode than APL mode.

I'm assuming you loaded the module by 

       apl=require"apl-compiler"
       apl:import()

That call to `apl.import` puts `help` and `lua` in the global environment.

The compiler works as follows:

1.  APL source is split into independent chunks by the `⋄` (diamond)
    separator, each of which is compiled on its own. This implies that
    you are not allowed to use the diamond inside an APL string. You are
    also not allowed to use the single-quote inside. If you really need
    those two characters inside a string, create it using Lua and refer
    to it inside APL by its global name.

2.  An APL chunk is lexed, parsed and translated to Lua code in one step
    by a single LPeg grammar. I thank Roberto Ierusalimschy from the
    bottom of my heart for this absolutely ideal tool.

3.  The result of the previous step is a chunk of Lua code, which looks
    exactly like what you would code in Lua mode, and a number
    identifying the position in the APL code at which the compiler could
    not continue. If that is before the end of the string, the
    compilation failed, and the APL code is displayed with an arrow
    pointing to that position and an error message. This is maybe only
    slightly more helpful than saying there is an error somewhere, but
    at least it gives a starting point.

           ⍺∘.×(⍺←⍳5)
        ./apl-compiler.lua:116: APL syntax error
        ⍺∘.×(⍺←⍳5)
         ↑

    There is nothing wrong with the outer product to which the arrow
    points. The real error is that assignment to local variables is only
    allowed at the start of a statement, but the compiler makes no clever
    second-guessing of common mistakes. All that the arrow says is that
    `⍺` by itself would have been legal APL code, but no substring that
    goes beyond the arrow is legal. 
    
4.  If the compilation of all the APL chunks succeeded, the Lua chunks
    produced by the compiler are concatenated; if there was only one
    chunk, `return` is put in front of it; the result is tacked onto a
    standard preamble and the whole lot is processed by `load`, with the
    APL runtime environment as fourth argument.

5.  If `load` succeeds (which it should, otherwise there is a compiler
    bug that should be reported), the original APL code is set as the
    help string for the Lua function, which is returned. The Lua code
    can be recovered by `apl.lua`.

All this is done by calling `apl` (it is a table, yes, but a callable
table), which returns an anonymous function that can be stored or 
executed.

       sorted_down=apl"⍵[⍒⍵]"
       print(lua(sorted_down))
    return _w[Down(_w)]
       x=apl"10?100"()
       print(x)
    (49,23,96,93,19,89,67,48,66,35)
       print(sorted_down(x))
    (96,93,89,67,66,49,48,35,23,19)

The APL runtime environment has mostly the same keys and values as 
`apl`, but it is a different table. You have read-write access to the 
module table; you have no access to the APL runtime environment. There 
are certain advantages to this.

       print(apl.Deal(100,10))
    (85,41,79,81,92,24,38,3,34,60)
       apl.Deal = function() print"Your APL system is now stoned" end
       print(apl.Deal(100,10))
    Your APL system is now stoned
       print(Execute"10?100")
    (49,23,96,93,19,89,67,48,66,35)

I'm not saying that a sufficiently sneaky hacker can't access it — 
after all, this is open-source code — merely that you can't easily 
clobber it by accident.

It is possible to write quite long stretches of APL this way, but it
is even harder to find a computing task that genuinely requires a 
long stretch of APL code. What one does need fairly often is a way
to separate expressions that belong to the same chunk. The reason is
that assigment to the local variables  `⍺` and `⍵` is only allowed 
at the beginning of a statement.

The statement separator `⋄` is used for thus purpose. Also available 
is the APL comment symbol `⍝`, which makes everything up to and 
including the next linebreak invisible to the compiler.

       sievestep=apl[[
          ⍺←⍺×⍳⌊(⍴⍵)÷⍺    ⋄  ⍝ multiples of ⍺ not past end of ⍵
          ⍵[⍺]←0          ⋄                 ⍝ assign 0 to those
          ←⍵      ⍝ explicit return required in multi-statement 
       ]]
       print(lua(sievestep))
    _a=Mul(Range(Floor(Div(_a,Shape(_w)))),_a); _w[_a]=0; return _w 
 
You can see from the Lua listing why there is a restriction on where you
can assign to a local variable: it gets its own separate Lua statement.
On the other hand, assignment into a table, such as the APL or Lua
global environment, is implemented as a function call, which can appear
anywhere.
    
However, program logic has not been implemented in APL. You will need
mixed-language programming, using Lua for the logic. If the original 
environment that was active when the library was loaded is still in
effect, APL code can see global the Lua variables: see [Namespaces].
However, locals and upvalues are invisible, so the process needs some 
care when used from inside a function. 

The canonical APL way is to do everything via named or anonymous 
functions. Your data is passed in as arguments `⍵` and `⍺`, values
are returned. If you pass a table, that table itself is mutable.

       function primes(n)
       local x=apl"⍳⍵"(n)
       local step=apl"⍵[1↓⍺×⍳⌊(⍴⍵)÷⍺]←0 ⋄ ←⍵"
       for i=2,math.sqrt(n) do 
          local p=x[i]
          if p and p>0 then step(x,p) end 
       end
       x[1]=0
       return apl"(⍵>0)/⍵"(x)
       end
       print(primes(100))
    2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97

Adity
-----

In Lua, the number of arguments to a function is no big deal. You
supply more arguments than the function was defined with? The others
are ignored. You supply fewer arguments than the function was defined 
with? The missing ones are given the value `nil`. This behaviour lies 
at the very heart of the Lua way of thinking,

In APL, the number of arguments to a function is absolutely central.
Funtions are _niladic_ (no arguments), _monadic_ (one argument) or
_dyadic_ (two arguments). Lua⋆APL does not make provision for named 
niladic functions. All functions return exactly one value (which may
be a hugely complicated nested array, though) except the non-standard
function ∘ (`Pass`), which returns nothing (and acts as a mere placeholder
to some operators).

The APL syntax allows the adity of a function to be determined by
its context in the expression. Just like Lua knows the difference 
between unary minus and subtraction, APL knows the difference between
monadic and dyadic use of a function symbol — in fact, about 20 APL
symbols can be used for either a monadic or a dyadic function, and
in almost all cases, those functions are implemented by different 
Lua functions.

Operators are even more complicated. In principle there are numerous
possibilities for the adity of an operator, its arguments and its
result. In practice only two kinds occur in standard APL. 

### Monadic operators

A monadic operator acts on a dyadic function to form a monadic function.

### Dyadic operators

A dyadic operator acts on a pair of dyadic functions to form a dyadic 
function. 

The Lua⋆APL library contains a few operators (`Both` acts on a dyadic
function to form a dyadic function, `Each` acts on a monadic function
to form a monadic function) which do not fit into this framework and 
can therefore not be used from APL. Functions created by them can be 
registered for APL use, though.

Namespaces
----------

This is no issue at all in Lua mode: the library functions do not
store or access anything. It is different for functions compiled
by the APL compiler. These have `_ENV` set to the APL runtime 
environment. 

You have three main mechanisms for getting values back from APL.

-  Return values of APL statements.
-  Global assignment (see below).
-  The pseudo-operator `@`. `apl"@f"` does not pass anything to the
   APL compiler, but returns the item with that name from the APL
   runtime environment.

           =Deal(100,10)  
        Your APL system is now stoned
           Deal=apl"@Deal"   -- recovery!
           =Deal(100,10)
        (85,41,79,81,92,24,38,3,34,60)

Three namespaces are visible from an APL function.

-   The local namespace of a function. This contains only the names `_a`
    and `_w`, which start out as the values of the left and right 
    arguments, but can be assigned to. They are referred to in the APL
    code as `⍺` and `⍵` respectively.

-   The APL global namespace. This contains the functions currently
    known to APL under their Lua names. The underscore, though 
    alphabetic in Lua, has a special meaning during APL assigment 
    and is therefore best avoided. The APL namespace is a field `_V` 
    in the APL runtime environment.  

-   The Lua global namespace, which is set as the `__index` field of the
    metatable of `_V`. The APL global namespace takes precedence when
    retrieving a value, but if it does not contain that name, the Lua
    namespace is tried next. Assignment into the Lua namespace from APL
    is achieved by putting an underscore in front of the name. That
    underscore is not part of the real name; it merely indicates which
    namesapce to use.

Four more namespaces are used by the APL compiler. These are
collectively referred to as the APL registry, and contain the same
functions as the APL runtime environment, but under their APL names.
They contain functions and operators, both monadic and dyadic.

The APL compiler assumes that a name refers to a variable unless it
has been added to the APL registry. The easiest way is to assign a
newly defined function. The newly defined function will be defined
as a monadic function and as a dyadic function (use Lua's runtime
distinction if necessary) and can be used wherever a built-in 
APL function can. 

       run=function(str) print(apl(str)()) end
       cf=function(_w,_a) return _w+1/_a end
       run"2 cf 3"
    ./apl-compiler.lua:113: APL syntax error
    2 cf 3
      ↑
       run"cf←cf"    
    cf
       run"2 cf 3"
    3.5
       run"cf/⌽2 1 2 1 1 4 1 1 6 1 1 8"
    2.718281835206

For direct assignment to work, the name must be a valid Lua name too.

More flexibility is offered by the `apl.register` function. You can
define new operators, use a different APL name (which need not be
a valid Lua name) from the Lua name), and define help. 
See `help(apl.register)`.

APL mode
========

The APL standalone interpreter gives an approximation to APL's
look-and-feel. Here is a sample session.

    $ lua-apl
    Lua 5.2.2  Copyright (C) 1994-2013 Lua.org, PUC-Rio
    Lua⋆APL 0.2.0 © Dirk Laurie 2013
    Bug reports are welcome. You'll find me on Lua-L.
    Try `apl.help()` if you don't want to read even the README.
    --
       ⍺←⍳5 ⋄ ←A←⍺∘.×⍺
     1  2  3  4  5
     2  4  6  8 10
     3  6  9 12 15
     4  8 12 16 20
     5 10 15 20 25
       5 ¯5↑A[2 3;3 2]
    0 0 0 6 4
    0 0 0 9 6
    0 0 0 0 0
    0 0 0 0 0
    0 0 0 0 0
       2 3⌽A
    12 15  3  6  9
    16 20  4  8 12
    20 25  5 10 15
     4  5  1  2  3
     8 10  2  4  6

This is pretty standard APL, but some points deserve mention:

-   The diamond separator `⋄` is supported. It is necessary in this
    case because `⍺∘.×(⍺←⍳5)` is invalid in Lua⋆APL.
-   The parameter names (`⍺` and `⍵`) are available for temporary
    values. Other assignments go into the APL global namespace, or
    even the Lua global namespace (see [Namespaces]).
-   Every input line translates to a single APL function. If that line
    contains a separator, you must explicitly put in a unary assignment
    `←` if you want the function to return something. If there is no 
    separator, the value of the one APL expression is returned.
-   The jot (`∘`) is mapped to the Lua function `Pass`, which throws
    away all its arguments and returns nothing. This can be used to 
    suppress printout of one-expression inputs. Implementing jot as
    a function also removes the need for the compiler to have 
    a separate syntax for the outer product.
-   For a matrix that does not have two columns, `Rotate` (`⌽`) with a
    left argument of length 2 currently specifies constant rotation
    along the two axes. This feature may well be removed later, as may
    may some other features that could be considered eccentricities. It
    depends on the feedback I get. Nothing is frozen before Version 1.0
    is released.

Some other important points have not been illustrated in the short sample.

-   The APL-enabled Lua interpreter pre-empts all the command-line
    parameters of the standard Lua interpreter. You cannot redirect 
    to its input, and script files cannot be processed. For that, you
    must use the compiler explicitly from Lua.

-   Heuristics are used to guess whether an input chunk is APL. These
    change so often that I don't document them outside `lua-apl.c` any
    more. Ideally, it should not bother anybody: it is very hard to
    invent a character string that could parse to either correct APL or
    correct Lua, so it ought to be very easy to see at a glancce which
    it is.

    The comments in `lua-apl.c` (search for "guess") include tips on how
    to override a wrong guess.

-   If you replay input history (assuming your Lua has that feature) you
    will notice that your input has been changed to what you would have
    typed in Lua mode, e.g. `2 3⌽A` turns into `return apl"2 3⌽A"()`.


        
------------------------------------------------------------------------

Obsolete part of manual; some items may still be true and not covered
above.




Things all users must know
==========================

From here onwards, "APL" will mean "the dialect of APL supported by
Lua⋆APL".  This is mostly compatible with APL⋆PLUS (from which the APL 
star in the name has been borrowed), but without the things Lua does 
better: program structure, system calls, input-output etc.


APL types vs Lua types
------------------------

APL recognizes five types: functions, operators, scalars, vectors and 
matrices. These are accommodated in Lua types as follows:

-   APL scalars are Lua numbers or strings.  As in Lua, _strings are 
    not character arrays_, they are string scalars. Most APL functions 
    do not distinguish these in cases where Lua would not, e.g. 
    `'30'×'40'` or `Multiply('30','40')` will happily return the number 
    `1200`. Only a handful of functions expect or produce strings, but 
    several others can handle them.

    Lua userdata, if assigned to global Lua names, are also APL scalars. 
    If equipped with the right metamethods, they might work inside APL 
    expressions, but this possibility is unexplored.
   
-   APL functions are implemented as Lua functions, but the *left* APL
    argument is the *second* Lua argument. Think of the Lua 5.2
    `math.log` function: it is already the correct implementation of the
    APL `⍟` (Logarithm). As in Lua, whether a function is called
    monadically or dyadically is only decided at runtime, but the APL
    functions are truly polymorphic and different Lua functions can be
    called in the two case.

-   APL functions are not first-class values. The `∇` function (Define)
    returns an anonymous Lua function, which can be assigned to a name 
    in either the Lua global namespace or the APL function namespace, 
    but not in the APL namespace `apl._V.` 

    Once a function is in the APL function namespace, it is treated 
    just like any built-in function by the APL compiler. In particular,
    it needs to be called with an argument.

    Functions in the Lua global namespace, on the other hand, are
    visible to APL if not shadowed and regarded by the APL compiler
    as values, not as functions, as by the APL compiler.

    The `@` operator (Address) turns an APL function into an APL value.

           f ← ∇'⍵+10×⍺'
           _g ← f@1   ⍝ _g←f would be a syntax error
           =g(5,7)
        75

    The argument `1` in `f@1` is meaningless, but APL syntax requires
    it.

-   APL operators are implemented as Lua functions.

-   APL vectors are origin-1 Lua tables. There should be no holes, i.e.
    positive integer indices for which `tbl[k]==nil` but `tbl[k+1]~=nil`
    are illegal. Vectors of vectors can be handled by some functions,
    and conversion of a matrix to and a vector of rows is offered by
    the non-standard APL functions `Squish` (`⌷`) and `Unsquish` (`⌻`).

-   APL matrices are origin-1 Lua tables like APL vectors, but have a
    field `shape` which contains a table with two numbers, the number of
    rows and columns.

-   Indexing in APL is dyadic; in Lua it is monadic. Tables and Lua
    functions (not APL functions) are used as indices to APL arrays 
    to achieve equivalent (in fact more versatile) functionality,


Description from the APL point of view
======================================

The functions do what one could expect the corresponding APL functions
to do, except that the values they act on are Lua values: numbers,
strings, tables and functions. They all take one or two arguments, 
traditionally called ⍺ and ⍵, and return one value.

Although an APL reference manual would not be totally useless — the
Lua⋆APL dialect is intended to conform to APL⋆Plus Special Edition with
some features from APL2. There is no attempt to reproduce the exact
behaviour of any current APL implementation; on the contrary, some
symbols also used by more recent APLs are used here to mean something
different. *The definition of the function is what it says in the
interactive help for it.*

The following symbols either are absent from APL⋆PLUS or have extended 
meanings here:

    ⌷ ⌻ @ # ¨ ∘ ∇ ⍴
    
You get help by giving the symbolic name as argument.

       help'+'
    1. Clone: +⍵ returns an exact copy of ⍵
    2. Add = function(⍵,⍺) return ⍺+⍵ end

Names like `Clone` and `Add` are specific to this implementation. You
do not need them in APL mode.

### Assignment

When you assign to name starting with an underscore, the underscore
is removed and the value is assigned to a name in the Lua global
namespace.

           _a←1 2 3 ⋄ _b←4 5 6
           print(a,b)
        1 2 3	4 5 6

The same applies to defined functions. Functions assigned to names 
in the Lua global namespace are regarded as mere values by APL. Only
these functions can be used by themselves as table indices.

### System calls, input and output

There is no support at the APL level. You must use Lua for this.    

### Diagnostics

The APL compiler has rudimentary support for finding syntax errors. It
displays the offending source and indicates the first character such
that the substring up to the previous position is still valid APL code,
but that no further progress is possible. In some cases, e.g.
parenthesized expressions or expressions that contain function
definitions, this may be a long way before the actual error.

Run-time diagnostics are designed to be more informative.

### System variables

Variables whose names start with `⎕` are reserved for system variables,
that is, APL variables on which the behaviour of certain functions may 
depend.

At present, the following system variables are recognized.

⎕format
:   The format to be used by monadic `⍕`. This must be a Lua
    format string with one slot, e.g. `%.14g`.

⎕pp
:   The number of digits appearing after the decimal point in the
    format used by monadic `⍕` when there is no `⎕format`.  This
    will be used to generate an appropriate format for the particular 
    value being formatted.  

Description from the Lua point of view
======================================

The APL functions `⌷` (Squish) and `⌻` (Unsquish) convert to and
from Lua types that have no APL counterpart.  In the following,
lower-case names refer to Lua values of the type under discussion
(they can be seen by APL is assigned to global Lua names), upper 
case names refer to APL names.

We assume that the CamelCase names have been made visible without
need for qualification.

### Nil

APL does not have a concept of `nil`. `Squish(x)` (or `⌷x`) converts 
nils to `NaN`, which has the type `"number"` even though it is 
not-a-number. All arithmetic operations involving `NaN` have result 
`NaN`; all APL comparison operations involving `NaN` have result `0`, 
even `NaN==NaN`. You cannot convert `NaN` back to `nil`. If you need 
APL to return a nil for consumption by Lua, the function `Pass` 
(or `∘`) will do (although strictly speaking it returns nothing, not
nil). 

### Booleans

APL has no Boolean type. APL comparison and logical functions return 
0 or 1, _both of which are `true` to Lua_. `Squish(b)` (or `⌷b`)
converts a Lua table of Booleans to 0-1 values, `Unsquish(B)`
(or `1⌻B`) converts an APL array to Booleans.

### Strings

Lua strings are treated as scalars. APL-style characters and character
matrices are not supported, and the use of string-valued arguments to
any APL function except `⍎` and `⍕` has not really been tested.  The 
coherence of both APL and Lua is so good that useful results may well 
in some cases be obtained from string arguments.

If you really need character vectors, you can converting strings
to vectors of byte values.

       x=Squish"⍺-⍵"
       =x
    226 141 186 45 226 141 181
       =Execute'2⌻x'
    ⍺-⍵

### Tables

Even though holes are illegal, it is very inefficient to test for them
all the time. Like the Lua table library, therefore, APL relies internally 
on the built-in length operator `#` to give the length of arrays. If you 
create all your APL tables via built-in APL functions, including `⌷`, 
this should not be a problem. If an APL function ever returns an array 
with a hole, it is a bug that I would like to be informed of.

All APL functions accept any Lua array, but returned arrays are APL
arrays. The only difference is that APL arrays are provided with a
metatable, which defines a `tostring` function reminiscent of how APL
implementations print arrays, and metamethods for the arithmetic
operations, indexing and concatenation. Arrays passed as arguments to 
APL functions may on return be found to have acquired this metatable,
even though the return value is a different table. It is not considered 
to be a bug when this happens.

APL matrices differ from APL vectors in having a `shape` field. The
presence of this field influences the behaviour of many functions,
most of which however have not been implemented at this stage. The
shape is a two-element vector giving the number of rows and columns
respectively.

### Functions

Any Lua function is a valid APL function too. However, a Lua name
referring to a function will be regarded as a value by the the APL
compiler. This is a feature, not a bug, since an APL index must be
a value.


General design
--------------

Most of the functions in the module table have one-character names, and 
most of those names are non-ASCII UTF-8 codepoints actually occupying
two or three bytes. The characters are traditional APL characters, 
e.g. `×`, but they are not special characters.  They look like names 
to the patched Lua 5.2, and they need to be separated from other names
just like the usual names.

In some cases, the one-character name is an ASCII character, e.g. `+`.
These have been kept to an absolute minimum, and non-ASCII equivalents
as described under __UTF-8 Essentials__ have been used whenever possible. 
Whenever the function name is a non-alphabetic ASCII character, an alias 
consisting of alphabetic characters has been provided, e.g. `plus`.

For APL functions that you defined yourself, `help` prints the APL code
and `lua` gives the Lua code as a string.

       f=∇"⍵/(1+⍺)"
       help(f)
    ⍵/(1+⍺)
       =lua(f)
    ∇: slash(plus(⍺,1),⍵)


Mapping from Lua to APL is done by the squish function, which converts
a vector of vectors to a matrix with the given rows. This can be
called from Lua or from APL.

       A=apl.⌷{{1,2,3},{4,5,6}}
       =A
    1 2 3
    4 5 6
       =apl.⌷(A.shape)
    2 3
       t={{1,2,3},{4,5,6}}
       ⌷t
    1 2 3
    4 5 6

You can unsquish too:


   
Some APL functions require that numeric values actually be integers
or 0-1 quantities. Their behaviour when given invalid arguments
is undefined: they may in some way still work; there may be a test 
for the required property; there may be a Lua error message; they 
may quietly return nonsense.



## Using the functions directly from Lua

The Lua⋆APL module (loaded say as `apl`) does not place anything in the 
global namespace. You access the functions as `apl.⍴`, `apl.plus`,
`apl['+']` etc. This is intolerable for the very commonly used
`apl.∇` and `apl.⍎`, so `apl` has been made callable to put these
two functions as well as `lua` and `help` into `_ENV`.

If you use any other function often enough, it quickly becomes tiresome
to type "`apl.`" in front of it every time. So for the rest of this
discussion I will assume that the required function has been made
visible in the current namespace, whether as a global, a local or
an upvalue.

Functions with UTF-8 names are easiest.
You write `⋆⍵` in APL to compute the exponential function; you
write `⋆(⍵)` in Lua. If `⍵` is an array, the function is applied 
term-by-term.

       =⋆{1,2,3}
     2.71828  7.38906 20.08554
    
You write `⍺⋆⍵` in APL to compute the power function; you write 
`⋆(⍵,⍺)` in Lua.  You only need `⋆(⍵,⍺)` if neither of `⍺` and 
`⍵` is an APL array, otherwise `a^⍵` will also work.

For the power function, as for most of the standard arithmetic and
comparison functions, `(⍵,⍺)` can be any combination of scalar and 
array. If both terms are arrays, they must be of equal length.

       ⋆({1,2,3},{4,5})
    ./apl.lua:454: array arguments of unequal size
    stack traceback:
    	[C]: in function 'error'
    	./apl.lua:454: in function 'f2'
    	./apl.lua:467: in function '⋆'
    	stdin:1: in main chunk
    	[C]: in ?
       =⋆({1,2,3},{6,5,4})
     6 25 64

APL operators look exactly APL functions from the Lua point of view,
but have different semantics. The arguments to operators are functions, 
and the result is also  a function. Since monadic operators have only
a left operand, the operands to a dyadic operator are (left,right),
not (right,left) as for functions.

~~~
   prod = ⌿(×)
   =prod(⍳(6))
720
   cumprod = ⍀(×)
   =cumprod{1,2,3,4,5,6}
1 2 6 24 120 720
   dotprod = dot(plus,×)
   =dotprod({3,4,5},{1,-2,1})
0
~~~

It is ignored if only integers need to be

## Using the functions via the APL compiler

The `∇` function creates a Lua function from a given string by parsing
it as an expression written in APL, according to the APL syntax rules:

1. The right argument of a function is all of the rest of the 
   expression.
2. The left argument of a function is only the single operand to
   the left of it.
3. Parentheses may be used to override the first two rules.
4. The left argument of an operator is only the single operand,
   to the left of it, which must be a function.
5. The right argument of a dyadic operator is the single operand
   to the right of it.

An APL expression may freely use the ASCII names of functions, even 
when that name is a single special character. The Lua equivalent,
being valid Lua code, will contain either a non-ASCII name or an
alphabetic alias.

The resulting Lua functions may be nil-adic, monadic or dyadic, i.e. 
they take no arguments `()`, one argument `(⍵)` or two arguments 
`(⍵,⍺)`. The specific names `⍺` and `⍵` must be used. When called 
from APL, `⍺` refers to the left argument and `⍵` to the right argument.

You can't return the function generated by an operator as you can 
directly from Lua. I.e. in Lua `f=slash(plus)` is perfectly legal, 
but in an APL expression you must give arguments, i.e. `f=∇"+/⍵"`.

A nil-adic function can be evaluated immediately by using `⍎` instead
of `∇`. The result is a Lua value. An APL function can only return `nil`
if there was an error.

APL expressions may contain user variables.

       x={1,2,3}
       =⍎'+/÷x'
    1.8333333333333

Lua⋆APL searches for these variables first in `apl._V` (or simply
`_V` if you invoked `apl()`). If not found, tries the environment 
(i.e. `_ENV`).

The names recognized inside APL expressions are more restricted than 
those recognized inside Lua. Only the first character may be a 
non-ASCII UTF-8 codepoint, and that codepoint must not be the name 
of an APL function.

For forward compatibility, it is wise not to start a name with any 
of the currently unused symbols on the APL keyboard given above.

In an APL expression, user-defined functions may be used, but they
must already have been defined as functions at compilation time,
whether in `_V` or in `_ENV`.

~~~
   s1=∇'f*g⍵' -- assumes f and g are non-functions
./apl.lua:171: bad input to apl2lua: two adjacent non-functions
f*g⍵
   ↑

   g=load''   -- a dummy function
   s2=∇'f*g⍵' -- assumes g is a function
   =lua(s2)   --> ⋆(g(⍵),f)  
local ⍵,⍺=... return ⋆(g(⍵),f)

   f=load''
   s3=∇'f*g⍵' -- assumes f and g are functions 
   =lua(s3)   --> f(⋆(g(⍵)))
local ⍵,⍺=... return f(⋆(g(⍵)))
~~~

Note that all names used in an APL expression are non-local. That
implies that the function `f` executed when you finally evaluate
`s2` will be whatever value `f` has then.

## Notes on specific functions

Some functions are non-standard.

-   Some versions of APL do not define them.
-   Those that do, do not always do it in the same way.

I hope most of the cases where this dialect of APL is nonstandard
are documented below. Remember that _there are no string literals_.

Ways of calling a function shown before the semicolon apply to Lua;
those shown after, to APL.

`add_function(name,func)`
:   Registers a name with the APL compiler as a function or as an
    operator. `func` is a table in which `func[1]` is the monadic
    function and `func[2]` the dyadic function associated with the
    given name. If only one of the two is given, that one will be
    used for all calles. Several key-value options are available:
    see the online help.

Assign: `; ⍺←⍵`
:   The assign function `←` stores `⍵` in `apl._V` at the key `⍺`. 
    This value takes precedence in an APL expression over a global 
    Lua variable with the same name. 

Define: `f=∇"APL source", f=∇("APL source","APL name"); ⍺∇⍵`
:   This is implemented as an APL function, not a system function.
    The argument is a string, so that the function must either be
    called from Lua or the string argument `⍵` must have been created 
    earlier. The argument `⍺` must be a name not yet known to the
    APL compiler, under which the new function will be registered.

    The result is always a function of two arguments, as described in
    [How does the APL compiler work?].

Format: `; ⍺⍕⍵`
:   The dyadic format function uses a number as format: `12` means 
    `%12d`, `12.6` means `%12.6f` and `¯12.6` means `%12.6e`. You can't
    have more than 9 digits after the decimal point. An array of
    numbers can be given: they apply term-by-term if `⍵` is a
    vector and columnwise if `⍵` is a matrix.

    You can also supply a string-valued format or array of formats.

Pass: `; ∘⍵, ⍺∘⍵`
:   Apart from its role as a placeholder in an outer product, this 
    function ignores its arguments and returns nothing. This bare 
    fact is mentioned without any claim that it is useful.

Squish: `apl.⌷"...", apl.⌷{...}, apl.⌷(⍵); ⌷⍵`
:   Lua-to-APL conversion. 

    - If `⍵` is nil, it is replaced by `NaN`.
    - If `⍵` is boolean, it is replaced by a 0-1 value.
    - If `⍵` is a string, it is converted to an array of byte values.
    - If `⍵` is any other scalar, it is returned unchanged by `⌷⍵`.
      This is unlikely to be useful except in the case of a number.
    - If `⍵` is a table, and none of the entries in `⍵` is itself 
      a table, `⍵` is converted to an APL table by setting its metatable, 
      and returned. No new table is created.
    - Otherwise the entries in `⍵` must all be tables of the same length,
      and an APL matrix of which they are the rows is created.

Unsquish: `; ⍺⌻⍵`
:   APL-to-Lua conversion. A selective inverse of `⌷`.

    - Always: Matrices are converted to vectors of rows. 
    - `⍺=1`: 0 is converted to `false`, other values to `true`.
    - `⍺=2`: Numbers in the range 0 to 255 are converted to bytes.
      Vectors become strings, matrices become arrays of strings.


Scan, Reduce: `⍺/⍵`, `⍺⌿⍵`, `⍺\⍵`, `⍺⍀⍵`
:   When given an empty argument `⍵`, the reduce operators return the 
    unit of the function `⍺` e.g. `⌈/0⍴0` returns `-Inf`, or raise an
    error if no unit is defined. The scan operators always raise an 
    error if no unit is defined. At present only the associative dyadic
    functions `+ − ∨ ∧ ⌈ ⌊` have units, and there is no mechanism to
    define other units.

